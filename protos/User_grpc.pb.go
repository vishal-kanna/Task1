// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: protos/User.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TrackerClient is the client API for Tracker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackerClient interface {
	AddUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*Response, error)
	Find(ctx context.Context, in *SearchName, opts ...grpc.CallOption) (*Record, error)
	// rpc AllUser(Empty)returns(Record);
	FindActivity(ctx context.Context, in *SearchActivity, opts ...grpc.CallOption) (*Record, error)
	FindUserByActivity(ctx context.Context, in *SearchActivity, opts ...grpc.CallOption) (Tracker_FindUserByActivityClient, error)
}

type trackerClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackerClient(cc grpc.ClientConnInterface) TrackerClient {
	return &trackerClient{cc}
}

func (c *trackerClient) AddUser(ctx context.Context, in *Record, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Tracker/AddUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Update(ctx context.Context, in *RecordReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/Tracker/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) Find(ctx context.Context, in *SearchName, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/Tracker/Find", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) FindActivity(ctx context.Context, in *SearchActivity, opts ...grpc.CallOption) (*Record, error) {
	out := new(Record)
	err := c.cc.Invoke(ctx, "/Tracker/FindActivity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackerClient) FindUserByActivity(ctx context.Context, in *SearchActivity, opts ...grpc.CallOption) (Tracker_FindUserByActivityClient, error) {
	stream, err := c.cc.NewStream(ctx, &Tracker_ServiceDesc.Streams[0], "/Tracker/FindUserByActivity", opts...)
	if err != nil {
		return nil, err
	}
	x := &trackerFindUserByActivityClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Tracker_FindUserByActivityClient interface {
	Recv() (*Record, error)
	grpc.ClientStream
}

type trackerFindUserByActivityClient struct {
	grpc.ClientStream
}

func (x *trackerFindUserByActivityClient) Recv() (*Record, error) {
	m := new(Record)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TrackerServer is the server API for Tracker service.
// All implementations must embed UnimplementedTrackerServer
// for forward compatibility
type TrackerServer interface {
	AddUser(context.Context, *Record) (*Response, error)
	Update(context.Context, *RecordReq) (*Response, error)
	Find(context.Context, *SearchName) (*Record, error)
	// rpc AllUser(Empty)returns(Record);
	FindActivity(context.Context, *SearchActivity) (*Record, error)
	FindUserByActivity(*SearchActivity, Tracker_FindUserByActivityServer) error
	mustEmbedUnimplementedTrackerServer()
}

// UnimplementedTrackerServer must be embedded to have forward compatible implementations.
type UnimplementedTrackerServer struct {
}

func (UnimplementedTrackerServer) AddUser(context.Context, *Record) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedTrackerServer) Update(context.Context, *RecordReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTrackerServer) Find(context.Context, *SearchName) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedTrackerServer) FindActivity(context.Context, *SearchActivity) (*Record, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindActivity not implemented")
}
func (UnimplementedTrackerServer) FindUserByActivity(*SearchActivity, Tracker_FindUserByActivityServer) error {
	return status.Errorf(codes.Unimplemented, "method FindUserByActivity not implemented")
}
func (UnimplementedTrackerServer) mustEmbedUnimplementedTrackerServer() {}

// UnsafeTrackerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackerServer will
// result in compilation errors.
type UnsafeTrackerServer interface {
	mustEmbedUnimplementedTrackerServer()
}

func RegisterTrackerServer(s grpc.ServiceRegistrar, srv TrackerServer) {
	s.RegisterService(&Tracker_ServiceDesc, srv)
}

func _Tracker_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Record)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracker/AddUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).AddUser(ctx, req.(*Record))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracker/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Update(ctx, req.(*RecordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_Find_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).Find(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracker/Find",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).Find(ctx, req.(*SearchName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_FindActivity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchActivity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackerServer).FindActivity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Tracker/FindActivity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackerServer).FindActivity(ctx, req.(*SearchActivity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tracker_FindUserByActivity_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchActivity)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TrackerServer).FindUserByActivity(m, &trackerFindUserByActivityServer{stream})
}

type Tracker_FindUserByActivityServer interface {
	Send(*Record) error
	grpc.ServerStream
}

type trackerFindUserByActivityServer struct {
	grpc.ServerStream
}

func (x *trackerFindUserByActivityServer) Send(m *Record) error {
	return x.ServerStream.SendMsg(m)
}

// Tracker_ServiceDesc is the grpc.ServiceDesc for Tracker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tracker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Tracker",
	HandlerType: (*TrackerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _Tracker_AddUser_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tracker_Update_Handler,
		},
		{
			MethodName: "Find",
			Handler:    _Tracker_Find_Handler,
		},
		{
			MethodName: "FindActivity",
			Handler:    _Tracker_FindActivity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindUserByActivity",
			Handler:       _Tracker_FindUserByActivity_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/User.proto",
}
